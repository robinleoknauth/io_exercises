\cb3 20ele2 = words[idx2]\cb1 \
\cb3 16ele1 = words[idx1]\cb1 \
\cb3 l31ongest_arr\cb1 \
\pard\pardeftab720\partightenfactor0
}
\cb3 25longest_arr << current_longest\cb1 \
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\cb3 4. str == str.reverse\cb1 \
6. \
11. \
\cb3 15current_longest = ''\cb1 \
}
\f0\fs25\fsmilli12800 \cf2 \cb3 \expnd0\expndtw0\kerning0
\cb3 9. current_longest = ''\cb1 \
\cb3 32end\cb1 \
{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
\cb3 8. words = string.split('')\cb1 \
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;\red0\green255\blue0;

\deftab720
\cb3 21current_longest << ele2\cb1 \
\cb3 5. end\cb1 \
\cf4 \cb3 29\cf2 idx1 += 1\cb1 \
\cb3 14while idx1 < words.length\cb1 \
}
\cb3 30end\cb1 \
\cb3 3. def palindrome?(str)\cb1 \
\cb3 23puts current_longest # == > (noon, oo, minim, ini, mum) these are the only words allowed 24into this if statment. Why are these not the only words being pushed into longest_arr?\cb1 \
\cb3 10. longest_arr = []\cb1 \
\cb3 7. def longest_palindrome(string)\cb1 \
2. \
1. str = 'noonminimum'\cb1 \
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
\cb3 26end\cb1 \
\cb3 i22f palindrome?(current_longest)\cb1 \
\cb3 17current_longest << ele1\cb1 \
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c0\c100000\c0;
\cb3 19while idx2 < words.length\cb1 \
\cb3 27idx2 += 1\cb1 \
\cb3 18idx2 = idx1 + 118\cb1 \
\cb3 i13 .dx1 = 0\cb1 \
\cb3 28end\cb1 \
